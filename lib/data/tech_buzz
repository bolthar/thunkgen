this thing has gone from peaking at 2500 ($BUZZ) / sec down to 1800 or so
i even put in some "$BUZZ" logic to cut down on redundancy
my suspicion is that the dynamic $BUZZ around creating $BUZZ must be slow compared to just cloning $BUZZ
i probably could have used one of those dynamic $BUZZ instead of a "$BUZZ" 
...but the $BUZZ and all are just so simple/elegant in this thing. 
I have all kinds of methods to $BUZZ/trace now
my generalize and filled with Ruby Goodness "$BUZZ" designed has dropped performance
if this '$BUZZ' system can be judged to be "$BUZZ" (another seinfield) by some trusted 3rd party then a path could likely be worked out
having resources for optimizing some of this $BUZZ stuff would probably tweak the performance and a demo $BUZZ would make it really nice
i was really doing more interesting things in $BUZZ but those are out of data now
this one is way simple and part of the "start up phase" for $BUZZ
since I haven't finished that yet i don't have any better ones in this domain yet
they are the result of a $BUZZ